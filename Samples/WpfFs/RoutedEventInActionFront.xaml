<UserControl xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:model="clr-namespace:WpfFs.UI;assembly=WpfFs"
             xmlns:rzmk="clr-namespace:RZ.Wpf.Markups;assembly=RZ.Wpf"
             x:Class="WpfFs.UI.RoutedEventInActionFront"
             >
  <UserControl.DataContext>
    <model:RoutedEventInActionModel />
  </UserControl.DataContext>
  <UserControl.Resources>
    <Style TargetType="Border">
      <Setter Property="Padding" Value="1cm" />
    </Style>
    <Style TargetType="Button">
      <Setter Property="Margin" Value=".05cm" />
      <Setter Property="Padding" Value=".1cm" />
    </Style>
  </UserControl.Resources>
  <DockPanel>
    <TextBlock DockPanel.Dock="Top" TextWrapping="Wrap"
               FontFamily="Times New Roman"
               FontSize="20"
               FontStyle="Italic"
               Foreground="DarkSlateBlue"
               Width="5in">
      Notice the color of borders when a button is clicked. If Button.Click event is raised, the border background colors will change
      "inward". If ApplicationCommands.Open is raised, the border background colors will change "outward".
    </TextBlock>
    <Border Background="Green" ButtonBase.Click="ChangeColor" CommandManager.Executed="ChangeColor2">
      <Border Background="Yellow" ButtonBase.Click="ChangeColor" CommandManager.Executed="ChangeColor2">
        <Border Background="Orange" ButtonBase.Click="ChangeColor" CommandManager.Executed="ChangeColor2">
          <Border Background="Red" ButtonBase.Click="ChangeColor" CommandManager.Executed="ChangeColor2">
            <Border Background="Brown" ButtonBase.Click="ChangeColor" CommandManager.Executed="ChangeColor2">
              <StackPanel>
                <Button Click="ShowPopup">Click to show a modal dialog [Direct]</Button>
                <Button>Click to show effect of [Routed Event]</Button>
                <Button Command="Open" Click="PreventEvents">Click to show a modal dialog [Command]</Button>
                <TextBlock Width="3.5in" TextWrapping="Wrap">
                  Command itself also uses routed event CommandManager.CanExecute and CommandManager.Executed 
                  to query and execute command.
                </TextBlock>
                <Button Click="RaisedAsCommand">Click to show a modal dialog [Manual Command]</Button>
                <Button>
                  <i:Interaction.Triggers><i:EventTrigger EventName="Click"><i:InvokeCommandAction Command="Open" /></i:EventTrigger></i:Interaction.Triggers>
                  Click to show a modal dialog [Blend SDK]
                </Button>
                <Button Click="{rzmk:BindCommand Open}">Click to show a modal dialog [RZ.Wpf binding]</Button>
              </StackPanel>
            </Border>
          </Border>
        </Border>
      </Border>
    </Border>
  </DockPanel> 
</UserControl>